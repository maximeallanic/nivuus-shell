name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  syntax-check:
    name: 📝 Syntax Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install ZSH
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh
    
    - name: Syntax Check
      run: make test-syntax

  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    needs: syntax-check
    
    strategy:
      matrix:
        zsh-version: ['5.8', '5.9']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install ZSH ${{ matrix.zsh-version }}
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh git build-essential
        
        # Install specific ZSH version if needed
        zsh --version
    
    - name: Install BATS
      run: |
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        cd /tmp/bats
        sudo ./install.sh /usr/local
    
    - name: Run Unit Tests
      run: make test-unit

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh git curl
        
        # Install BATS
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        cd /tmp/bats
        sudo ./install.sh /usr/local
    
    - name: Run Integration Tests
      run: make test-integration

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh git time
        
        # Install BATS
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        cd /tmp/bats
        sudo ./install.sh /usr/local
    
    - name: Run Performance Tests
      run: make test-performance
    
    - name: Upload Performance Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: test-report.txt

  compatibility-tests:
    name: 🌐 Compatibility Tests
    runs-on: ${{ matrix.os }}
    needs: unit-tests
    
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, macos-latest]
        include:
          - os: ubuntu-latest
            install-cmd: 'sudo apt-get update && sudo apt-get install -y zsh git'
          - os: ubuntu-20.04
            install-cmd: 'sudo apt-get update && sudo apt-get install -y zsh git'
          - os: macos-latest
            install-cmd: 'brew install zsh git'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        ${{ matrix.install-cmd }}
        
        # Install BATS
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        cd /tmp/bats
        sudo ./install.sh /usr/local
    
    - name: Run Compatibility Tests
      run: make test-compatibility

  full-test-suite:
    name: 🎯 Full Test Suite
    runs-on: ubuntu-latest
    needs: [syntax-check, unit-tests, integration-tests, performance-tests, compatibility-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh git curl time
        
        # Install BATS
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        cd /tmp/bats
        sudo ./install.sh /usr/local
    
    - name: Run Complete Test Suite
      run: make test-report
    
    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      with:
        name: complete-test-report
        path: test-report.txt

  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './install'
        format: gcc
        severity: warning
    
    - name: Check for secrets
      run: |
        # Simple secret detection
        if grep -r "password\|secret\|token" --include="*.sh" --include="*.zsh" . | grep -v "test" | grep -v "example"; then
          echo "⚠️ Potential secrets found"
          exit 1
        fi
        echo "✅ No secrets detected"
