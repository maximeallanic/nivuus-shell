name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        run: |
          sudo apt update
          sudo apt install -y zsh shellcheck
          
      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Verify version consistency
        run: |
          TAG_VERSION="${{ steps.version.outputs.VERSION }}"
          FILE_VERSION=$(cat VERSION)
          
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "❌ Version mismatch: tag=$TAG_VERSION, file=$FILE_VERSION"
            exit 1
          fi
          
          INSTALL_VERSION=$(grep '^VERSION=' install.sh | cut -d'"' -f2)
          if [ "$TAG_VERSION" != "$INSTALL_VERSION" ]; then
            echo "❌ Version mismatch in install.sh: tag=$TAG_VERSION, install=$INSTALL_VERSION"
            exit 1
          fi
          
          echo "✅ All versions match: $TAG_VERSION"

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          # Extract changelog content between this version and the next version header
          CHANGELOG=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +3)
          
          # Save to file to preserve formatting
          echo "$CHANGELOG" > release_notes.md
          
          # Set output for GitHub release
          echo "CHANGELOG_FILE=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create release archive
        run: |
          # Create installation package
          tar -czf nivuus-shell-${{ steps.version.outputs.VERSION }}.tar.gz \
            config/ \
            install/ \
            scripts/ \
            install.sh \
            install-latest.sh \
            uninstall.sh \
            release \
            README.md \
            CHANGELOG.md \
            ARCHITECTURE.md \
            VERSION \
            Makefile

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release v${{ steps.version.outputs.VERSION }}"
          body_path: release_notes.md
          files: |
            nivuus-shell-${{ steps.version.outputs.VERSION }}.tar.gz
            install.sh
            install-latest.sh
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify release creation
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          echo "✅ Release v$VERSION created successfully"
          echo "📦 Installation commands:"
          echo "# Latest release:"
          echo "curl -fsSL https://github.com/maximeallanic/nivuus-shell/releases/latest/download/install.sh | bash"
          echo "# Specific version:"
          echo "curl -fsSL https://github.com/maximeallanic/nivuus-shell/releases/download/v$VERSION/install.sh | bash"

      - name: Cleanup
        run: |
          rm -f release_notes.md

  docker:
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Dockerfile for testing
        run: |
          cat > Dockerfile << 'EOF'
          FROM ubuntu:22.04

          # Install dependencies
          RUN apt-get update && apt-get install -y \
              zsh \
              git \
              curl \
              wget \
              build-essential \
              sudo \
              && rm -rf /var/lib/apt/lists/*

          # Create test user with sudo privileges
          RUN useradd -m -s /bin/zsh testuser && \
              echo "testuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

          # Copy configuration
          COPY . /home/testuser/zsh-config/
          RUN chown -R testuser:testuser /home/testuser/zsh-config/

          # Switch to test user
          USER testuser
          WORKDIR /home/testuser/zsh-config

          # Install configuration (non-interactive to skip prompts)
          RUN chmod +x install.sh && ./install.sh --non-interactive

          # Test startup
          RUN zsh -i -c 'echo "ZSH Ultra Performance Config installed successfully!"'

          CMD ["zsh"]
          EOF

      - name: Build Docker image
        run: |
          docker build -t zsh-ultra-performance:${{ github.ref_name }} .
          docker build -t zsh-ultra-performance:latest .

      - name: Test Docker image
        run: |
          docker run --rm zsh-ultra-performance:${{ github.ref_name }} zsh -c 'echo "Docker test passed!"'
